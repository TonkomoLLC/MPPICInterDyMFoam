/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.1.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 0.1;

vertices
(
    (0.125 1 0)
    (0.125 1 2)
    (0.125 0 2)
    (0.125 0 0)
    (0.375 1 0)
    (0.375 1 2)
    (0.375 0 2)
    (0.375 0 0)
    (0.8   1 0)
    (0.8   1 2)
    (0.8   0 2)
    (0.8   0 0)
    (1     1 0)
    (1     1 2)
    (1     0 2)
    (1     0 0)
);

blocks
(
    hex (0 1 2 3 4 5 6 7)
    (40 1 5)
    simpleGrading (1 1 1)
    hex (4 5 6 7 8 9 10 11)
    (40 1 8)
    simpleGrading (1 1 1)
    hex (8 9 10 11 12 13 14 15)
    (40 1 4)
    simpleGrading (1 1 1)
);

edges
(
);

boundary
(
    statorWalls
    {
        type wall;
        inGroups        (stator);
        faces
        (
            (12 13 14 15)
        );
    }

    base
    {
        type wall;
        faces
        (
            (0 4 7 3)
            (4 8 11 7)
            (8 12 15 11)
        );
    }

    rotorShaft
    {
        type wall;
        inGroups        (rotor);
        faces
        (
            (0 3 2 1)
        );
    }

    top
    {
        type wall;
        faces
        (
            (1 2 6 5)
            (5 6 10 9)
            (9 10 14 13)
        );
    }

    back
    {
        type patch;
        faces
        (
            (0 1 5 4)
            (4 5 9 8)
            (8 9 13 12)
        );
    }

    extrude
    {
        type patch;
        faces
        (
            (2 3 7 6)
            (6 7 11 10)
            (10 11 15 14)
        );
    }

/*    AMI1
    {
        type            cyclicAMI;
        neighbourPatch  AMI2;
        transform       noOrdering;
        surface
        {
        }
        faces
        (
        );
    }

    AMI2
    {
        type            cyclicAMI;
        neighbourPatch  AMI1;
        transform       noOrdering;
        surface
        {
        }
        faces
        (
        );
    } */
);

mergePatchPairs
(
);

// ************************************************************************* //
